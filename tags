!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/nidionis/minishell/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
FT_ENV_H	include/ft_env.h	/^# define FT_ENV_H$/;"	d
MINISHELL_H	include/minishell.h	/^# define MINISHELL_H$/;"	d
PS1	include/minishell.h	/^# define PS1 /;"	d
TOKEN_APPEND	include/minishell.h	/^# define TOKEN_APPEND /;"	d
TOKEN_HEREDOC	include/minishell.h	/^# define TOKEN_HEREDOC /;"	d
TOKEN_PIPE	include/minishell.h	/^# define TOKEN_PIPE /;"	d
TOKEN_REDIR_IN	include/minishell.h	/^# define TOKEN_REDIR_IN /;"	d
TOKEN_REDIR_OUT	include/minishell.h	/^# define TOKEN_REDIR_OUT /;"	d
apply_cmd	src/main.c	/^void	apply_cmd(char *line, t_list *gc)$/;"	f	typeref:typename:void
btree_content	include/minishell.h	/^typedef struct btree_content$/;"	s
btree_split	src/ft_tree_utils.c	/^void	btree_split(t_btree *root, char *sep)$/;"	f	typeref:typename:void
cmd	include/minishell.h	/^	char	*cmd;$/;"	m	struct:btree_content	typeref:typename:char *
end_of_word	src/main.c	/^char	*end_of_word(char *str)$/;"	f	typeref:typename:char *
free_node_content	src/ft_tree_utils.c	/^void	free_node_content(void *stuff)$/;"	f	typeref:typename:void
ft_strnstr_quotes	src/ft_parsing.c	/^char	*ft_strnstr_quotes(const char *str, const char *ndl, size_t len)$/;"	f	typeref:typename:char *
is_quoted	src/ft_parsing.c	/^int	is_quoted(char c, int reset)$/;"	f	typeref:typename:int
line	include/ft_env.h	/^	char			*line;$/;"	m	struct:s_export	typeref:typename:char *
main	src/main.c	/^int	main(int argc, char **argv, char **envp)$/;"	f	typeref:typename:int
minishell	src/main.c	/^void	minishell(void)$/;"	f	typeref:typename:void
minishell_exit	src/main.c	/^void	minishell_exit(t_list *gc)$/;"	f	typeref:typename:void
my_env	include/ft_env.h	/^	char		**my_env;$/;"	m	struct:s_env	typeref:typename:char **
my_export	include/ft_env.h	/^	t_export	*my_export;$/;"	m	struct:s_env	typeref:typename:t_export *
next	include/ft_env.h	/^	struct s_export	*next;$/;"	m	struct:s_export	typeref:struct:s_export *
print_node_content	src/ft_tree_utils.c	/^void	print_node_content(void *content)$/;"	f	typeref:typename:void
s_env	include/ft_env.h	/^typedef struct s_env$/;"	s
s_export	include/ft_env.h	/^typedef struct s_export$/;"	s
split_node	src/ft_tree_utils.c	/^void	split_node(t_btree *root, char *sep)$/;"	f	typeref:typename:void
substitute_var	src/main.c	/^size_t	substitute_var(char *str, t_list *gc)$/;"	f	typeref:typename:size_t
substr_left	src/ft_parsing.c	/^char	*substr_left(char *node_content, char *found)$/;"	f	typeref:typename:char *
substr_right	src/ft_parsing.c	/^char	*substr_right(char *node_content, char *found)$/;"	f	typeref:typename:char *
t_btree_content	include/minishell.h	/^}	t_btree_content;$/;"	t	typeref:struct:btree_content
t_env	include/ft_env.h	/^}	t_env;$/;"	t	typeref:struct:s_env
t_export	include/ft_env.h	/^}	t_export;$/;"	t	typeref:struct:s_export
token	include/minishell.h	/^	char	*token;$/;"	m	struct:btree_content	typeref:typename:char *
